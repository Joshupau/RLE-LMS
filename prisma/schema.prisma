datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model SchoolYear_Semester {
  id                      String  @id @default(auto()) @map("_id") @db.ObjectId
  schoolyear              String
  semester                String
  current                 Boolean @default(false)

  scheduling              Scheduling[]
  resource                Resource[]
  submissionOfPatientCase SubmissionOfPatientCases[]
  userscheduling          UserScheduling[]
  resourceGroup           ResourceGroup[]
}

model User {
  id                      String  @id @default(auto()) @map("_id") @db.ObjectId
  schoolId                Int     @unique
  firstName               String
  middleName              String?
  lastName                String
  email                   String  @unique
  hashedPassword          String
  age                     Int
  contact                 Int?

  status                  Boolean
  role                    UserRole @default(Student)

  // Student Additional Fields
  yearLevel               Int?
  section                 String?
  gender                  String?
  group                   String?

  resources               Resource[]
  submissionOfPatientCases SubmissionOfPatientCases[]
  userScheduling          UserScheduling[]

  resourceGroupIds        String[] @db.ObjectId
  resourceGroup           ResourceGroup[] @relation(fields: [resourceGroupIds], references: [id])
  
  scheduleIds             String[] @db.ObjectId
  schedules               Scheduling[] @relation(fields: [scheduleIds], references: [id])
  
  notification            Notification[]
}

enum UserRole {
  SystemAdmin
  Dean
  ClinicalInstructor
  Student
}

model UserScheduling {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  schedulingId String @db.ObjectId
  week String
  timeIn DateTime?
  timeOut DateTime?
  date DateTime
  notes String?


  schoolyearId String? @db.ObjectId
  schoolyear SchoolYear_Semester? @relation(fields: [schoolyearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scheduling Scheduling @relation(fields: [schedulingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user User @relation(fields: [userId], references: [id])

}

model Scheduling {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  groupId              String
  clinicalHours        String
  area                 String?
  week                 String
  yearLevel            Int
  dateFrom             DateTime[]
  dateTo               DateTime[]
  
  userIds              String[]     @db.ObjectId
  user User[] @relation(fields: [userIds], references: [id])

  resourceGroup   ResourceGroup?
  resources                Resource[]


  areaId                String?     @db.ObjectId
  clinicalArea          Area? @relation(fields: [areaId], references: [id])

  submissionOfPatientCases SubmissionOfPatientCases[]
  userScheduling        UserScheduling[]

  schoolyearId String? @db.ObjectId
  schoolyear SchoolYear_Semester? @relation(fields: [schoolyearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 
 }

 model Area {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  schedule             Scheduling[]
 }

model ResourceGroup {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  scheduleId  String       @db.ObjectId @unique
  schedule    Scheduling   @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  userIds     String[]     @db.ObjectId
  users       User[]       @relation(fields: [userIds], references: [id])
  resources   Resource[]   

  schoolyearId String? @db.ObjectId
  schoolyear SchoolYear_Semester? @relation(fields: [schoolyearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 
}


model Resource {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  uploadLinks String[]

  schoolyearId String? @db.ObjectId
  schoolyear SchoolYear_Semester? @relation(fields: [schoolyearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  resourceGroupId String @db.ObjectId
  resourceGroup ResourceGroup @relation(fields: [resourceGroupId], references: [id])

  schedulingId String     @db.ObjectId
  scheduling   Scheduling @relation(fields: [schedulingId], references: [id], onDelete: Cascade)

  author       User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubmissionOfPatientCases {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  schedulingId  String @db.ObjectId
  userId        String @db.ObjectId
  caseNumber    Int
  caseType      String
  level         String
  date          DateTime
  status        Boolean @default(false)

  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  scheduling    Scheduling @relation(fields: [schedulingId], references: [id], onDelete: Cascade)
  
  schoolyearId String? @db.ObjectId
  schoolyear SchoolYear_Semester? @relation(fields: [schoolyearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  drCordCase       DrCordCase[]
  drMACase         DrMACase[]
  medicalCase      MedicalCase[]
  orMajorMinorCase ORMajorMinorCase[]
  chnCase          CHNCase[]
}

model DrCordCase {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  babyName   String
  sex        String
  apgarScore Int
  motherName String
  motherAge  Int
  staff      String
  birthplace String

  submissionOfPatientCases   SubmissionOfPatientCases @relation(fields: [submissionOfPatientCasesId], references: [id], onDelete: Cascade)
  submissionOfPatientCasesId String                   @db.ObjectId
}

model DrMACase {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  patientName      String
  age              Int
  medicalDiagnosis String
  dateOfDelivery   DateTime
  timeOfDelivery   DateTime
  typeOfDelivery   String
  birthplace       String

  submissionOfPatientCases   SubmissionOfPatientCases @relation(fields: [submissionOfPatientCasesId], references: [id], onDelete: Cascade)
  submissionOfPatientCasesId String                   @db.ObjectId
}

model MedicalCase {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  patientName        String
  age                Int
  maritalStatus      String
  sex                String
  attendingPhysician String
  medicalDiagnosis   String
  dateAdmitted       DateTime
  dateDischarge      DateTime?

  submissionOfPatientCases   SubmissionOfPatientCases @relation(fields: [submissionOfPatientCasesId], references: [id], onDelete: Cascade)
  submissionOfPatientCasesId String                   @db.ObjectId
}

model ORMajorMinorCase {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  patientName      String
  age              Int
  sex              String
  medicalDiagnosis String
  operation        String
  surgeon          String[]
  typeOfAnesthesia String
  anesthesiologist String
  scrub            String

  submissionOfPatientCases   SubmissionOfPatientCases @relation(fields: [submissionOfPatientCasesId], references: [id], onDelete: Cascade)
  submissionOfPatientCasesId String                   @db.ObjectId
}

model CHNCase {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  nameOfFamilyMembers   String[]
  relationToHead        String[]
  birthday              DateTime[]
  sex                   String[]
  maritalStatus         String[]
  educationalAttainment String[]
  occupation            String[]

  submissionOfPatientCases   SubmissionOfPatientCases @relation(fields: [submissionOfPatientCasesId], references: [id], onDelete: Cascade)
  submissionOfPatientCasesId String                   @db.ObjectId
}

model Notification {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  message       String
  createdAt     DateTime  @default(now())
  recipient      User    @relation(fields: [recipientId], references: [id])
  recipientId   String   @db.ObjectId
  isRead        Boolean   @default(false)
  type          String?   // Optional: To specify the type of notification
  link          String?   // Optional: To store a link associated with the notification
  expiresAt     DateTime? // Optional: To specify an expiration time for the notification
}